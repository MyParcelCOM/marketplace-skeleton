#!/usr/bin/env php
<?php

use Illuminate\Foundation\Console\ServeCommand;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any classes "manually". Feels great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

/**
 * Laravel has a specific list of environment variables available during the setup process of the application.
 * To add additional environment variables, you can add them to the ServeCommand::$passthroughVariables array.
 *
 * NOTE: env variables we define will not be available in the application's container by default and will need
 * to be added to the application's environment in docker-compose.yml. Any changes to these env vars will require
 * restarting the container to reload.
 */
ServeCommand::$passthroughVariables[] = 'APP_DEBUG';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
